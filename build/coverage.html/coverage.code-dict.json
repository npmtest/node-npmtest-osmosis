{"/home/travis/build/npmtest/node-npmtest-osmosis/test.js":"/* istanbul instrument in package npmtest_osmosis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osmosis/lib.npmtest_osmosis.js":"/* istanbul instrument in package npmtest_osmosis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_osmosis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_osmosis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-osmosis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-osmosis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_osmosis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_osmosis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_osmosis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_osmosis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_osmosis.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_osmosis.__dirname + '/lib.npmtest_osmosis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/index.js":"'use strict';\n\nvar Command = require('./lib/Command.js'),\n    Queue   = require('./lib/Queue.js'),\n    request = require('./lib/Request.js'),\n    libxml  = require('libxmljs-dom'),\n    instanceId      = 0,\n    memoryUsage     = 0,\n    cachedSelectors = {},\n    toMB    = function (size, num) {\n        return (size / 1024 / 1024).toFixed(num || 2) + 'Mb';\n    },\n\n    extend  = function (object, donor) {\n        var key, keys = Object.keys(donor),\n                    i = keys.length;\n\n        while (i--) {\n            key = keys[i];\n            object[key] = donor[key];\n        }\n\n        return object;\n    };\n\n/**\n *\n * Unless called with `new`, Osmosis will start automatically.\n * To start an instance created with `new`, use {@link Osmosis.run}.\n *\n * @constructor Osmosis\n *\n * @param {(string|contextCallback)} url - A URL\n * @param {object} [params] - GET query parameters\n * @returns Command\n * @see {@link Command.run}\n *\n * @example {@lang javascript}\n *\n * // These instances start immediately\n * osmosis.get('http://example.com');\n * osmosis('http://example.com');\n *\n * // These instances need started\n * instance = new osmosis.get('http://example.com');\n * instance.run();\n *\n * instance = new osmosis('http://example.com');\n * instance.run();\n */\n\nfunction Osmosis(url, params) {\n    if (url !== undefined) {\n        if (this instanceof Osmosis) {\n            return new Osmosis.get(url, params);\n        }\n\n        return Osmosis.get(url, params);\n    }\n\n    this.queue   = new Queue(this);\n    this.command = new Command(this);\n    this.id      = ++instanceId;\n}\n\n\n/**\n * @name options\n *\n * Osmosis and {@link https://github.com/tomas/needle|needle} options.\n *\n * @property {string} accept             - HTTP Accept header\n * @property {bool}   compressed         - Compress HTTP requests\n * @property {number} concurrency        - Number of simultaneous HTTP requests\n * @property {bool}   decode_response    - Decode compressed HTTP responses\n * @property {number} follow             - Number of redirects to follow\n * @property {bool}   follow_set_cookies - Set cookies for redirects\n * @property {bool}   follow_set_referer - Set referer header for redirects\n * @property {bool}   keep_data          - Keep raw HTTP data in\n                                           context.response.data\n * @property {bool}   timeout            - HTTP request timeout\n * @property {bool}   tries              - HTTP request attempts\n * @property {bool}   user_agent         - HTTP user agent\n * @memberof Osmosis\n * @instance\n * @default\n */\n\nOsmosis.prototype.opts = {\n    accept:                 'text/html,application/xhtml+xml,' +\n                            'application/xml;q=0.9,*/*;q=0.8',\n    compressed:             true,\n    concurrency:            5,\n    decode_response:        true,\n    follow:                 3,\n    follow_set_cookies:     true,\n    follow_set_referer:     true,\n    keep_data:              false,\n    parse_cookies:          true, // Parse \"Set-Cookie\" header\n    parse_response:         false,\n    rejectUnauthorized:     false,\n    statsThreshold:         25,\n    timeout:                30 * 1000,\n    tries:                  3,\n    user_agent:             'Mozilla/5.0 (Windows NT x.y; rv:10.0) ' +\n                            'Gecko/20100101 Firefox/10.0'\n};\n\n/**\n * Configure global Osmosis options.\n *\n * @function config\n * @memberof Osmosis\n * @param {string|object} option - A string `key` or an object of\n * { key: value } pairs.\n * @param {any} [value] - A value for the `key`\n * @instance\n * @see {@link Command.config}\n * @see {@link Osmosis.options}\n */\n\nOsmosis.config =\nOsmosis.prototype.config = function (option, value) {\n    var hasPrototype = (this.prototype !== undefined),\n        opts, key;\n\n    if (hasPrototype === true) {\n        opts = this.prototype.opts;\n    } else if (this.opts === undefined) {\n        opts = this.opts = {};\n    } else {\n        opts = this.opts;\n    }\n\n    if (option === undefined) {\n        return opts;\n    }\n\n    if (value !== undefined) {\n        opts[option] = value;\n    } else if (key !== undefined) {\n        for (key in option) {\n            opts[key] = option[key];\n        }\n    }\n};\n\n/**\n * Run (or re-run) an Osmosis instance.\n *g\n * If you frequently use the same Osmosis instance\n * (such as in an Express server), it's much more efficient to\n * initialize the instance once and repeatedly use `run` as needed.\n *\n * @borrows Command.run\n * @see {@link Command.run}\n */\nOsmosis.prototype.run = function () {\n    var self = this;\n\n    process.nextTick(function () {\n        self.started  = true;\n        self.command.start();\n    });\n};\n\n/**\n * Make an HTTP request.\n *\n * @private\n */\n\nOsmosis.prototype.request = function (url, opts, callback, tries) {\n    var self = this,\n        href   = url.href,\n        method = url.method,\n        params = url.params;\n\n    this.requests++;\n    this.queue.requests++;\n    this.queue.push();\n\n    request(url.method,\n            url,\n            url.params,\n            opts,\n            tries,\n            function (err, res, data) {\n                var proxies = opts.proxies;\n\n                self.queue.requests--;\n\n                if ((res === undefined || res.statusCode !== 404) &&\n                    proxies !== undefined) {\n                    self.command.error('proxy ' + (proxies.index + 1) +\n                                        '/' + proxies.length +\n                                        ' failed (' + opts.proxy + ')');\n\n                    // remove the failing proxy\n                    if (proxies.length > 1) {\n                        opts.proxies.splice(proxies.index, 1);\n                        opts.proxy = proxies[proxies.index];\n                    }\n                }\n\n                if (err !== null && ++tries < opts.tries) {\n                    self.queueRequest(url, opts, callback, tries);\n\n                    if (self.opts.log === true) {\n                        self.command.error(err + ', retrying ' +\n                                        url.href + ' (' +\n                                        (tries + 1) + '/' +\n                                        opts.tries + ')');\n                    }\n                } else {\n                    callback(err, res, data);\n                }\n\n                self.dequeueRequest();\n                self.queue.pop();\n            })\n            .on('redirect', function (new_url) {\n                if (self.opts.log === true) {\n                    self.command.log('[redirect] ' +\n                                     href + ' -> ' + new_url);\n                }\n            });\n};\n\n/**\n * Add a request to the queue.\n *\n * @param {string} method - HTTP request method\n * @param {string} url - The URL to request\n * @param {object} params - HTTP GET/POST Data\n * @param {object} opts - HTTP request options\n * @param {function} callback - Function to call when done\n * @private\n */\n\nOsmosis.prototype.queueRequest = function (url,\n                                           opts,\n                                           callback,\n                                           tries) {\n    if (tries === undefined) {\n        tries = 0;\n    }\n\n    if (this.queue.requests < this.opts.concurrency) {\n        this.request(url, opts, callback, tries);\n    } else {\n        this.queue.enqueue([url, opts, callback, tries]);\n    }\n};\n\nOsmosis.prototype.dequeueRequest = function () {\n    var arr, length = this.queue.length;\n\n    if (length === 0 || this.queue.requests >= this.opts.concurrency) {\n        return;\n    }\n\n    arr = this.queue.dequeue();\n\n    this.request(arr[0], arr[1], arr[2], arr[3]);\n};\n\n/**\n * Parse XML/HTML data.\n *\n * @param {string|buffer} data - The data to parse\n * @param {object} opts - libxmljs parse options\n * @private\n * @see Command.parse\n */\n\nOsmosis.prototype.parse = function (data, opts) {\n    /*\n     * We only use `parseHtml` because we need to\n     * avoid libxml namespaces when searching the document.\n     */\n\n    var document = libxml.parseHtml(data, opts);\n\n    if (opts !== undefined && opts.baseUrl !== undefined) {\n        document.location = opts.baseUrl;\n    }\n\n    return document;\n};\n\n/**\n * Print Node.JS process statistics via {@link Command.debug}.\n *\n * @private\n */\n\nOsmosis.prototype.resources = function () {\n    var mem         = process.memoryUsage(),\n        memDiff     = toMB(mem.rss - memoryUsage),\n        libxml_mem  = libxml.memoryUsage(),\n        nodes       = libxml.nodeCount();\n\n    if (this.opts.debug !== true) {\n        this.resources = null;\n\n        return;\n    }\n\n    if (nodes >= 1000) {\n        nodes = (nodes / 1000).toFixed(0) + 'k';\n    }\n\n    if (memDiff.charAt(0) !== '-') {\n        memDiff = '+' + memDiff;\n    }\n\n    this.command.debug(\n                'stack: '    + this.queue.count + ', ' +\n\n                'requests: ' + this.requests +\n                             ' (' + this.queue.requests + ' queued), ' +\n\n                'RAM: '      + toMB(mem.rss) + ' (' + memDiff + '), ' +\n\n                'libxml: '   + ((libxml_mem / mem.rss) * 100).toFixed(1) +\n                             '% (' + nodes + ' nodes), ' +\n\n                'heap: '     + ((mem.heapUsed / mem.heapTotal) * 100)\n                             .toFixed(0) + '% of ' +\n                             toMB(mem.heapTotal)\n            );\n\n    memoryUsage = mem.rss;\n};\n\n/**\n * Set the parent instance for this instance.\n *\n * Inherit the parent's queue and options.\n *\n * @private\n * @param {Command} parent - The parent Command.\n */\n\nOsmosis.prototype.setParent = function (parent) {\n    this.parent = parent;\n    this.queue  = parent.instance.queue;\n    this.opts   = parent.instance.opts;\n};\n\n/**\n * Resume the current instance.\n *\n * @param {function} callback - A function to call when resuming\n * @borrows Command.resume\n * @private\n */\n\nOsmosis.prototype.resume = function (arg) {\n    var length, i;\n\n    if (typeof arg === 'function') {\n        if (this.resumeQueue === undefined) {\n            this.resumeQueue = [];\n        }\n\n        this.resumeQueue.push(arg);\n    } else {\n        length = this.resumeQueue.length;\n\n        for (i = 0; i < length; ++i) {\n            this.resumeQueue[i]();\n        }\n\n        this.dequeueRequest();\n    }\n};\n\nOsmosis.prototype.requests = 0;\nOsmosis.prototype.paused = false;\nOsmosis.prototype.stopped = false;\nOsmosis.prototype.inspect = function () {\n    return 'Osmosis:' + this.id;\n};\n\n// Allow use of commands without creating a new instance:\n\nObject.keys(Command.prototype).forEach(function (name) {\n    if (Osmosis[name] !== undefined) {\n        return;\n    }\n\n    Osmosis[name] = function StartingFunction(arg1, arg2, arg3) {\n        var instance = new Osmosis(),\n            command  = instance.command;\n\n        instance.calledWithNew = (this instanceof StartingFunction);\n\n        return command[name](arg1, arg2, arg3);\n    };\n});\n\n// libxmljs overrides:\n\nlibxml.Document.prototype.findXPath = libxml.Document.prototype.find;\nlibxml.Element.prototype.findXPath  = libxml.Element.prototype.find;\n\nlibxml.Document.prototype.find = function (selector, cache) {\n    return this.root().find(selector, cache);\n};\n\nlibxml.Element.prototype.find = function (selector) {\n    if (selector.charAt(1) === '/' ||\n        selector.charAt(0) === '/' ||\n        selector.charAt(0) === '(') {\n        return this.findXPath(selector);\n    } else if (cachedSelectors[selector] === undefined) {\n        cachedSelectors[selector] = libxml.css2xpath(selector);\n    }\n\n    return this.findXPath(cachedSelectors[selector]) || [];\n};\n\n/**\n * @typedef {object} context\n *\n * An XML/HTML DOM object represting a Document, Element, Attribute\n * or other Node.\n */\n\n/**\n * @typedef {object} data\n *\n * An object containing values set by `.set`\n * @see {@link Command.set}\n */\n\n/**\n * @typedef {string} Selector\n *\n * A CSS/XPath selector\n * @see {@link https://github.com/css2xpath/css2xpath|Selectors}\n */\n\n/**\n * A callback function that returns the desired value.\n *\n * @callback middlewareCallback\n * @param {context} context - The current XML/HTML context node.\n * @param {data} data - The current data object.\n */\n\nmodule.exports = Osmosis;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/Command.js":"'use strict';\n\nvar Data     = require('./Data.js'),\n    URL      = require('url'),\n    fs       = require('fs'),\n    qs       = require('querystring'),\n    formFunctions = require('./Form.js'),\n    cmdDir   = __dirname + '/commands/';\n\n/**\n * An Osmosis command.\n *\n * @constructor Command\n * @protected\n * @param {object} parent - parent instance\n * @returns Command\n */\n\nfunction Command(parent) {\n    var self = this;\n\n    if (Object.getPrototypeOf(parent) === Command.prototype) {\n        // parent is a Command\n        this.prev = parent;\n        Object.defineProperty(this, 'instance', {\n            get: Command.prototype.getInstance,\n            set: Command.prototype.setInstance\n        });\n    } else if (parent !== undefined) {\n        // `parent` is an Osmosis instance\n        this.instance = parent;\n        // Call `process.nextTick` so other instances can initialize\n        process.nextTick(function () {\n            // Attempt to auto-run the instance only IF:\n            //  * Not already running\n            //  * Not created using `new`\n            //  * Not a child instance\n            if (parent.calledWithNew !== true &&\n                parent.parent === undefined) {\n                process.nextTick(function () {\n                    // Run on nextTick to allow any\n                    // runtimeCommands to finish first\n                    parent.run();\n                });\n            }\n        });\n    }\n\n    return this;\n}\n\nCommand.prototype = {\n    isCommand: true,\n\n    /**\n     * Change context to the current Document.\n     *\n     * @property document\n     * @see {@link Command.doc}\n     */\n\n    get document() {\n        return this.doc();\n    },\n\n    /**\n     * Else.\n     *\n     * @property else\n     * @private\n     * @see {@link Command.if}\n     */\n\n    get else() {\n         return this.else();\n     },\n\n    inherit: function (command) {\n        command.instance = this.instance;\n\n        return command;\n    },\n\n    /**\n      * Change context to the current Window.\n      *\n      * @property window\n      */\n\n    get window() {\n        return this.getWindow();\n    },\n\n    getInstance: function () {\n        return this.prev.instance;\n    },\n\n    setInstance: function (val) {\n        return (this.prev.instance = val);\n    }\n};\n\nCommand.prototype.run = function (context, data) {\n    return this.instance.run(context, data);\n};\n\n/**\n * Start a Command.\n *\n * @private\n * @function start\n * @param {context} context - HTML/XML context\n * @param {data} data - User defined Data\n * @memberof Command\n */\n\nCommand.prototype.start = function (context, data) {\n    var self        = this,\n        next        = this.next,\n        instance    = this.instance,\n        callback    = this.cb,\n        calledNext  = false,\n        window;\n\n    if (context === null) {\n        return;\n    }\n\n    if (instance.stopped === true) {\n        return;\n    }\n\n    if (instance.paused  === true) {\n        instance.resume(function () {\n            self.start(context, data);\n        });\n\n        return;\n    }\n\n    if (callback === undefined)  {\n        if (next === undefined) {\n            this.end(context, data);\n        } else {\n            next.start(context, data);\n        }\n\n        return;\n    }\n\n    instance.queue.push();\n\n    if (data === undefined) {\n        data = (new Data());\n    }\n\n    data.ref();\n\n    return callback.call(this, context, data, function (c, d) {\n        if (calledNext === true) {\n            // If `next` is called more than once,\n            // then we need to clone the data\n            next.start(c, d.clone().ref());\n        } else {\n            calledNext = true;\n            next.start(c, d);\n        }\n    }, function (err) {\n        data.unref();\n\n        if (calledNext !== true) {\n            self.end(context, data);\n        }\n\n        if (err !== undefined) {\n            self.error(err);\n        }\n\n        instance.queue.pop();\n    });\n};\n\n/**\n * Called when we reach the end of the command chain.\n *\n * @private\n */\n\nCommand.prototype.end = function (context, data) {\n    var window, parent;\n\n    // We're on the \"sentinel node\", meaning\n    // We've reached the end of the command chain\n    if (context !== undefined) {\n        if (context.doc === undefined) {\n            window = context.window;\n        } else if (context.doc().__window !== undefined) {\n            window = context.doc().defaultView;\n        }\n\n        if (window !== undefined) {\n            // close `window` when it reaches the last command\n            window.close();\n        }\n\n        this.instance.queue.done++;\n    }\n\n    if (data !== undefined) {\n        parent = data.parent;\n\n        if (parent !== undefined) {\n            if (data.isEmpty()) {\n                data = data.clone();\n\n                if (context.text !== undefined) {\n                    data.setObject(context.text());\n                } else if (context.value !== undefined) {\n                    data.setObject(context.value());\n                }\n            }\n\n            parent.merge(data);\n            data.unref();\n        }\n    }\n};\n\n/**\n * Get the current options and inherit previous options.\n *\n * @private\n */\n\nCommand.prototype.getOpts = function () {\n    var proto;\n\n    if (this.opts !== undefined) {\n        return this.opts;\n    }\n\n    if (this.prev !== undefined) {\n        proto = this.prev.getOpts();\n    } else if (this.instance !== undefined) {\n        proto = this.instance.opts;\n    }\n\n    this.opts = Object.create(proto);\n\n    return this.opts;\n};\n\n\n/**\n * Set an option for the current command.\n *\n * Clones inherited object values.\n *\n * @private\n */\n\nCommand.prototype.setOpt = function (name, value) {\n    var opts = this.getOpts();\n\n    if (value !== null &&\n        value instanceof Object &&\n        opts[name] !== null &&\n        opts[name] instanceof Object) {\n        opts[name] = extend(value, opts[name]);\n    } else {\n        opts[name] = value;\n    }\n\n    return opts;\n};\n\n/**\n * Internal HTTP request function.\n *\n * @param {string} method - Request method\n * @param {string} url    - URL to load\n * @param {object} params - GET query parameters or POST data\n * @param {function} callback - Callback function\n * @private\n */\n\nCommand.prototype.request = function (method, context, href, params, callback) {\n    var self     = this,\n        length   = callback.length,\n        instance = self.instance,\n        opts     = Object.create(this.getOpts()),\n        url, document, key, proxies;\n\n    if (!href || href.length === 0) {\n        callback(\"Invalid URL\");\n        return;\n    }\n\n    if (length === 3) {\n        opts.parse = false;\n    }\n\n    if (context !== undefined) {\n        document = context.doc();\n\n        url = URL.parse(document.location.resolve(href), true);\n\n        if (opts.follow_set_referer !== false) {\n            if (opts.headers === undefined) {\n                opts.headers = {};\n            }\n\n            opts.headers.referer = document.location.href;\n        }\n\n        if (opts.cookies !== undefined) {\n            if (document.cookies === undefined) {\n                document.cookies = {};\n            }\n\n            opts.cookies = extend(document.cookies, opts.cookies);\n        } else {\n            opts.cookies = document.cookies;\n        }\n\n        if (method === 'post') {\n            // Check the enctype if submitting a form\n            if (formFunctions.isMultipart(context)) {\n                opts.multipart = true;\n            }\n        }\n    } else if (href.substr(0, 1) === '//') {\n        url = URL.parse('http:' + href, true);\n    } else if (href.substr(0, 4) !== 'http') {\n        url = URL.parse('http://' + href, true);\n    } else {\n        url = URL.parse(href, true);\n    }\n\n    url.method = method;\n    url.params = params;\n\n    if (method === 'get') {\n        for (key in params) {\n            url.query[key] = params[key];\n        }\n\n        url.params = url.query;\n        url.search = qs.stringify(url.query);\n        url.href   = URL.format(url);\n    }\n\n    if (Array.isArray(opts.proxy)) {\n        opts.proxies = opts.proxy;\n    }\n\n    if (opts.proxies !== undefined) {\n        proxies = opts.proxies;\n\n        if (proxies.index === undefined || ++proxies.index >= proxies.length) {\n            proxies.index = 0;\n        }\n\n        opts.proxy = proxies[proxies.index];\n    }\n\n    instance.queueRequest(url, opts,\n    function (err, res, document) {\n        if (err !== null) {\n            self.error((self.name !== method ?\n                        '[' + method + '] ' :\n                        '') + (url.href) + ' - ' + err);\n\n            if (length === 2) {\n                callback(err, document);\n            } else if (length === 3) {\n                callback(err, res, document);\n            }\n        } else {\n            self.log('loaded [' + method + '] ' + url.href + ' ' +\n                (params ?\n                JSON.stringify(params) :\n                '') +\n                (opts.proxy ?\n                ' via ' + opts.proxy :\n                '')\n            );\n\n            if (length === 1) {\n                callback(document);\n            } else if (length === 2) {\n                callback(null, document);\n            } else {\n                callback(null, res, document);\n            }\n        }\n    });\n};\n\n/**\n * Call a callback when log, error, or debug messages are received.\n *\n * @name log/error/debug\n * @memberof Osmosis;\n * @param {function} callback - Callback\n */\n\n['log', 'error', 'debug'].forEach(function (name) {\n    Command.prototype[name] = function (msg, prefixed) {\n        if (msg instanceof Function) {\n            this[name] = msg;\n            this.instance.config(name, true);\n        } else if (this.next !== undefined) {\n            if (prefixed === undefined) {\n                this.next[name]('(' + this.name + ') ' + msg, '');\n            } else {\n                this.next[name](msg, '');\n            }\n        } else if (this.instance.parent !== undefined) {\n            this.instance.parent[name](msg, true);\n        }\n\n        return this;\n    };\n});\n\nfunction extend(object, donor) {\n    var key, keys = Object.keys(donor),\n    i = keys.length;\n\n    if (object === undefined) {\n        object = {};\n    }\n\n    while (i--) {\n        key = keys[i];\n        object[key] = donor[key];\n    }\n\n    return object;\n}\n\nfunction runtimeCommand(name, func) {\n    Command.prototype[name] = (function () {\n        var length   = arguments.length,\n            self = this, args, i;\n\n        if (length === 0) {\n            // Allow `.config()`, etc. to get configuration\n            // options during command chain compile time\n            return func.call(self);\n        }\n\n        args = new Array(length);\n\n        for (i = 0; i < length && arguments[i] !== undefined; i++) {\n            args[i] = arguments[i];\n        }\n\n        process.nextTick(function () {\n            if (self.next !== undefined) {\n                // We're NOT on the last command, so we call `func` in the\n                // context of the PRECEEDING command\n                func.apply(self.prev, args);\n            } else {\n                // We're on the last command, so we call `func` in the\n                // context of the FIRST command\n                func.apply(self.instance.command, args);\n            }\n        });\n\n        return self;\n    });\n}\n\nfunction contextCommand(name, func) {\n    Command.prototype[name] = (function () {\n        var length   = arguments.length,\n            self, i, args;\n\n        if (this.name === undefined) {\n            self = this;\n        } else {\n            self = new Command(this);\n        }\n\n        self.name = name;\n\n        args = new Array(length);\n\n        for (i = 0; i < length && arguments[i] !== undefined; i++) {\n            args[i] = arguments[i];\n\n            if (typeof args[i] === 'object') {\n                args[i] = this.findCommandArg(args[i]);\n            }\n        }\n\n        self.args = args;\n\n        if (func.length === 4) {\n            self.cb = func;\n        } else {\n            self.cb = func.apply(self, self.args);\n        }\n\n        self.next = new Command(self);\n\n        return self.next;\n    });\n}\n\nCommand.prototype.findCommandArg = function (obj) {\n    var keys, key, length, i = 0;\n\n    if (obj instanceof Command) {\n        obj.instance.setParent(this);\n        return obj.instance.command;\n    }\n\n    keys    = Object.keys(obj);\n    length  = keys.length;\n\n    for (; i < length; i++) {\n        key = keys[i];\n        switch (typeof obj[key]) {\n            case 'object':\n                if (obj[key] !== null) {\n                    obj[key] = this.findCommandArg(obj[key]);\n                }\n\n                break;\n            case 'function':\n                obj[key] = this.findCommandArg(this.then(obj[key]));\n        }\n    }\n\n    return obj;\n};\n\nfs.readdirSync(cmdDir).forEach(function (file) {\n    var command = require(cmdDir + file);\n\n    if (typeof command === 'object') {\n        Object.keys(command).forEach(function (name) {\n            contextCommand(name, command[name]);\n        });\n    } else {\n        runtimeCommand(file.substr(0, file.length - 3), command);\n    }\n});\n\nmodule.exports = Command;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/Data.js":"/*jslint node: true */\n'use strict';\n\n/**\n * @constructor Data\n * @param {object} [data] - Data object value\n * @param {object} [parent] - Parent Data object\n * @param {object} [index] - Index in the parent object\n * @param {bool} [isArray] - Is the object an array?\n * @property {number} refs - Number of references\n * @property {number} clones - Number of clones\n * @property {object} object - Key/value data storage\n * @property {Data} parent - Parent Data object\n * @property {string} index - Key to set in the parent object\n * @private\n */\n\nfunction Data(parent) {\n    this.stack = { count: 0 };\n\n    if (parent) {\n        this.parent = parent;\n    }\n\n    return this;\n}\n\n/**\n * Create an empty child Data object for the parent.\n *\n */\n\nData.prototype.child = function () {\n    return new Data(this);\n};\n\n/**\n * Clone a Data object.\n *\n */\n\nData.prototype.clone = function () {\n    var clone    = this.next();\n\n    clone.object = this.copy();\n\n    return clone;\n};\n\n/**\n * Call callback when `Data.stack.count` === 0.\n */\n\nData.prototype.done = function (cb) {\n    this.stack.done = cb;\n    return this;\n};\n\n/**\n * Get the raw data object.\n *\n */\n\nData.prototype.getObject = function () {\n    if (this.object === undefined) {\n        if (this.isArray() === true) {\n            this.toArray();\n        } else {\n            this.setObject({});\n        }\n    }\n\n    return this.object;\n};\n\n/**\n * Set the raw data object.\n *\n */\n\nData.prototype.setObject = function (object) {\n    this.object = object;\n\n    return this;\n};\n\n/**\n * Create a new Data object to pass to the next Command.\n *\n */\n\nData.prototype.next = function () {\n    var clone = new Data(this.parent)\n                    .setIndex(this.getIndex())\n                    .isArray(this.isArray());\n\n    clone.stack  = this.stack;\n    clone.object = this.object;\n    return clone;\n};\n\n/**\n * Increase the reference count on all ancestors.\n *\n */\n\nData.prototype.ref = function () {\n    this.stack.count++;\n    return this;\n};\n\n/**\n * Decrease the reference count on all ancestors.\n *\n */\n\nData.prototype.unref = function () {\n    if (--this.stack.count === 0) {\n        if (this.stack.done !== undefined) {\n            this.stack.done.call(this);\n        }\n    }\n};\n\n/**\n * Set a key/value in {@link Data.object}.\n *\n * @param {string|object} key - A key or { key: val } object\n * @param {any} val - A value\n */\n\nData.prototype.set = function (key, val) {\n    var object, currentVal;\n\n    if (val === undefined) {\n        return this;\n    }\n\n    if (this.isArray() === true) {\n        return this.push(val);\n    }\n\n    object     = this.getObject();\n    currentVal = object[key];\n\n    if (currentVal !== undefined) {\n        // If the key being set already has a value,\n        // then convert it to an Array.\n        if (currentVal instanceof Array) {\n            currentVal.push(val);\n        } else {\n            object[key] = [currentVal, val];\n        }\n    } else {\n        object[key] = val;\n    }\n\n    return this;\n};\n\n/**\n * Push a value onto {@link Data.object} array.\n */\n\nData.prototype.push = function (val) {\n    var object = this.toArray();\n\n    if (val === undefined) {\n        return this;\n    }\n\n    object.push(val);\n\n    return this;\n};\n\nData.prototype.copy = function () {\n    var obj = this.object,\n        data, i, keys, key;\n\n    if (this.isArray()) {\n        data = obj.slice(0);\n    } else if (obj instanceof Object) {\n        data = {};\n\n        for (i = 0, keys = Object.keys(obj); i < keys.length; i++) {\n            key = keys[i];\n            data[key] = obj[key];\n        }\n    } else {\n        data = obj;\n    }\n\n    return data;\n};\n\nData.prototype.isArray = function (val) {\n    if (val !== undefined) {\n        this._isArray = val === true;\n        return this;\n    }\n\n    return (this._isArray === true || this.object instanceof Array);\n};\n\nData.prototype.isEmpty = function () {\n    return (this.object === undefined ||\n            (this.object instanceof Object &&\n             Object.keys(this.object).length === 0)\n            );\n};\n\nData.prototype.getIndex = function () {\n    return this._index;\n};\n\nData.prototype.setIndex = function (index) {\n    if (this.isArray() !== true) {\n        this._index = index;\n    }\n\n    return this;\n};\n\nData.prototype.merge = function (child) {\n    var object = child.object,\n        index  = child.getIndex();\n\n    if (object === undefined) {\n        return;\n    }\n\n    if (this.isArray() === true) {\n        this.push(object);\n    } else if (index !== undefined) {\n        this.set(child.getIndex(), object);\n    } else if (object instanceof Object) {\n        this.extend(object);\n    }\n};\n\nData.prototype.toArray = function () {\n    var object = this.object;\n\n    if (object instanceof Array) {\n        return object;\n    }\n\n    if (this.isEmpty()) {\n        this.setObject([]);\n    } else {\n        this.setObject([ object ]);\n    }\n\n    return this.getObject();\n};\n\n\nData.prototype.extend = function (object) {\n    var key, keys = Object.keys(object),\n        isArray = this.isArray(),\n        i = keys.length;\n\n    while (i--) {\n        key = keys[i];\n\n        if (isArray) {\n            this.push(object[key]);\n        } else {\n            this.set(key, object[key]);\n        }\n    }\n\n    return object;\n};\n\nmodule.exports = Data;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/Form.js":"/*jslint node: true */\n'use strict';\n\nvar form = {};\n\nform.submit = function () {\n\n};\n\nform.isForm = function (node) {\n    return node.nodeName === 'form';\n};\n\nform.getForm = function (node) {\n    if (form.isForm(node)) {\n        return node;\n    } else if (node.hasAttribute('form')) {\n        return node.doc().getElementById(node.getAttribute('form'));\n    } else {\n        return node.get('ancestor-or-self::form');\n    }\n};\n\nform.getInputs = function (node) {\n    return form.getForm(node).find('[@name ' +\n                            'and not(@disabled) ' +\n                            'and not(@type=\"submit\")]');\n};\n\nform.getSubmitButton = function (node) {\n    if (form.isForm(node)) {\n        return node.get('[@type=\"submit\" and not(@disabled) and ' +\n                        '(not(@form) or @form=\"' +\n                            node.getAttribute('id') + '\"' +\n                        ')][1]');\n    } else if ((node.nodeName === 'input' || node.nodeName === 'button') &&\n                node.getAttribute('type') === 'submit') {\n        return node;\n    }\n\n    return null;\n};\n\nform.getAction = function (node) {\n    var document = node.doc();\n\n    if (node.hasAttribute('action')) {\n        return document.location.resolve(node.getAttribute('action'));\n    } else if (node.hasAttribute('formaction')) {\n        return document.location.resolve(node.getAttribute('formaction'));\n    } else {\n        return document.location.href;\n    }\n};\n\nform.getEnctype = function (node) {\n    if (node.hasAttribute('enctype')) {\n        return node.getAttribute('enctype');\n    } else if (node.hasAttribute('formenctype')) {\n        return node.getAttribute('formenctype');\n    }\n\n    return 'application/x-www-form-urlencoded';\n};\n\nform.isMultipart = function (node) {\n    if (node.hasAttribute === undefined) {\n        return false;\n    }\n\n    return (form.getEnctype(node).substr(0, 5) === 'multi');\n};\n\nform.getMethod = function (node) {\n    if (node.hasAttribute('method')) {\n        return node.getAttribute('method').toLowerCase();\n    } else if (node.hasAttribute('formmethod')) {\n        return node.getAttribute('formmethod').toLowerCase();\n    } else {\n        return 'get';\n    }\n};\n\nform.getParams = function (node) {\n    var params = {},\n        submit = form.getSubmitButton(node),\n        inputs = form.getInputs(node),\n        length = inputs.length,\n        i = 0, input, name, nodeName, type, value;\n\n    for (i = 0; i < length; i++) {\n        input = inputs[i];\n        name = input.getAttribute('name');\n        type = input.getAttribute('type');\n        nodeName = input.nodeName;\n        value = null;\n\n        if (name.charAt(name.length - 1) === ']') {\n            name = name.substr(0, name.length - 2);\n        }\n\n        if (type) {\n            type = type.toLowerCase();\n        }\n\n        switch (nodeName) {\n            case 'select':\n                input = input.get('option[selected]') ||\n                        input.get('option:first');\n\n                if (input !== null) {\n                    if (input.hasAttribute('value')) {\n                        value = input.getAttribute('value');\n                    } else {\n                        value = input.textContent;\n                    }\n                }\n\n                break;\n            case 'textarea':\n                value = input.textContent;\n                break;\n            case 'input':\n                switch (type) {\n                    case 'radio':\n                    case 'image':\n                        ['x', 'y'].forEach(function (p) {\n                            var array = [];\n\n                            if (name) {\n                                array.push(name);\n                            }\n\n                            array.push(p);\n\n                            params[array.join('.')] = 0;\n                        });\n                    case 'checkbox':\n                        if (!input.hasAttribute('checked'))  {\n                            break;\n                        }\n\n                        name  = name.replace(/\\[\\]$/, '');\n                        value = input.getAttribute('value') || 'on';\n\n                        break;\n                    default:\n                        value = input.getAttribute('value');\n                        break;\n\n                }\n                break;\n        }\n\n        if (value !== null) {\n            if (params[name] instanceof Array) {\n                params[name].push(value);\n            } else if (params[name] !== undefined) {\n                params[name] = [params[name], value];\n            } else {\n                params[name] = value;\n            }\n        }\n    }\n\n    if (submit !== null) {\n        if (submit.hasAttribute('name')) {\n            params[submit.getAttribute('name')] =\n                submit.getAttribute('value') || 'Submit Query';\n        }\n    }\n\n    return params;\n};\n\nmodule.exports = form;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/click.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Click an HTML element and continue after all events finish.\n *\n * @function click\n * @param {Selector} selector - Node(s) to click\n * @memberof Command\n * @instance\n * @example {@lang javascript}\n * .click('#nav > a')\n * .then(function(window) {\n *      var ajax = window.document.querySelector(\"#ajaxContent\");\n *\n *      if (ajax.textContent.length > 0) {\n *          this.log(\"ajax loaded\");\n *      }\n * })\n */\n\nfunction Click(context, data, next, done) {\n    var self     = this,\n        selector = this.args[0],\n        nodes    = context.find(selector),\n        window;\n\n    if (nodes.length === 0) {\n        if (this.getOpts().debug === true) {\n            this.debug('no results for \"' + selector + '\"');\n        }\n\n        return done();\n    }\n\n    window = context.doc().defaultView;\n    window.addEventListener('done', function () {\n        nodes.forEach(function (node, index) {\n            node.dispatchEvent('click');\n\n            window.addEventListener('done', function () {\n                if (index === nodes.length - 1) {\n                    next(context, data);\n                    done();\n                }\n            });\n\n        });\n\n    });\n}\n\nmodule.exports.click = Click;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/config.js":"/**\n * Set configuration options for the **preceeding** command on down the chain.\n *\n * @function config\n * @param {string|object} option - A `key` string or { key: value } object\n * @param {string} [value] - A value for the given `key`\n * @memberof Command\n * @instance\n * @see Osmosis.options\n * @see Osmosis.config\n */\n\nmodule.exports = function (key, val) {\n    var self = this, opts;\n\n    if (self.name === undefined && self.prev !== undefined) {\n        self = self.prev;\n    }\n\n    opts = self.getOpts();\n\n    if (key === undefined) {\n        return opts;\n    }\n\n    if (typeof key === 'object') {\n        extend(opts, key, true);\n    } else if (typeof key === 'function') {\n        key(opts);\n    } else {\n        opts[key] = val;\n    }\n\n    return this;\n};\n\nfunction extend(object, donor) {\n        var key, keys = Object.keys(donor),\n                    i = keys.length;\n\n        while (i--) {\n            key = keys[i];\n            object[key] = donor[key];\n        }\n\n        return object;\n    };\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/contains.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Continue if the context node contains the given string.\n *\n * @function follow\n * @memberof Command\n * @param {string|RegExp} match - A string to match.\n * @instance\n */\n\nfunction Contains(context, data, next, done) {\n    if (getContent(context).indexOf(this.string) !== -1) {\n        next(context, data);\n    } else {\n        this.debug('\"' + this.string + '\" not found');\n    }\n\n    done();\n}\n\nfunction getContent(node) {\n    if (node.text !== undefined) {\n        return node.text();\n    } else if (node.value !== undefined) {\n        return node.value();\n    }\n}\n\nmodule.exports.contains = function (string) {\n    this.string = string;\n    return Contains;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/cookie.js":"/**\n * Set a cookie. Short for `.config({ cookies: ... })`.\n *\n * Note: Setting a cookie to `null` will delete the cookie.\n *\n * @function cookie\n * @param {string} name - Cookie name\n * @param {string} value - Cookie value\n * @memberof Command\n * @instance\n * @see {@link Osmosis.config}\n * @see {@link Command.config}\n */\n\nmodule.exports = function (name, value) {\n    var opts = this.getOpts();\n\n    if (!opts.hasOwnProperty('cookies')) {\n        if (opts.cookies !== undefined) {\n            opts.cookies = extend({}, opts.cookies);\n        } else {\n            opts.cookies = {};\n        }\n    }\n\n    if (value === null) {\n        delete opts.cookies[name];\n    } else {\n        opts.cookies[name] = value;\n    }\n\n    return this;\n};\n\nfunction extend(object, donor) {\n    var key, keys = Object.keys(donor),\n                i = keys.length;\n\n    while (i--) {\n        key = keys[i];\n        object[key] = donor[key];\n    }\n\n    return object;\n}\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/data.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Calls a callback with the current {@data} object.\n *\n * Note: Don't use this command to modify the {@data} object. Please use\n *  {@link Command.then} instead.\n *\n * @function data\n * @param {function} callback - A callback with an argument for {@data}\n * @memberof Command\n * @instance\n */\n\nfunction Data(context, data, next, done) {\n    this.args[0](data.getObject());\n    next(context, data);\n    done();\n}\n\nmodule.exports.data = Data;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/delay.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Delay each context before continuing down the chain.\n *\n * @function delay\n * @param {number} delay - A number of milliseconds or a float of seconds.\n * @memberof Command\n * @instance\n */\n\nfunction Delay(context, data, next, done) {\n    var delay = this.delay, self = this;\n\n    if (this.timeout === undefined) {\n        this.timeout = delay;\n    }\n\n    setTimeout(function () {\n        self.timeout -= delay;\n        next(context, data);\n        done();\n    }, this.timeout);\n\n    this.timeout += delay;\n}\n\n\nmodule.exports.delay = function (delay) {\n    this.delay = delay;\n\n    if (this.delay % 1 !== 0) {\n        this.delay = this.delay * 1000;\n    }\n\n    return Delay;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/do.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Execute each argument asynchronously using the current context and data.\n *\n * After each argument has finished, {@link Command.do} will continue to the\n * immediately following command using the original {@link context}.\n *\n * @function do\n * @memberof Command\n * @param {...(Osmosis|middlewareCallback)} function - Callbacks or instances\n * @instance\n */\n\nvar Do = function (context, data, next, done) {\n    var args   = this.args,\n        length = args.length,\n        pending = length,\n        dataDone = function () {\n            if (--pending !== 0) {\n                return;\n            }\n\n            next(context, data);\n            done();\n        }, i;\n\n    for (i = 0; i < length; i++) {\n        args[i].start(context, data.child().done(dataDone));\n    }\n};\n\nmodule.exports.do = Do;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/done.js":"/**\n * Call a callback when the Osmosis instance has completely finished.\n *\n * @function done\n * @memberof Command\n * @param {function} function - Callback function\n * @instance\n */\n\n function Done(cb) {\n    if (typeof cb === 'function') {\n        this.done = cb;\n    } else if (this.next !== undefined) {\n        this.next.done();\n    }\n\n    return this;\n}\n\nmodule.exports = Done;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/fail.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Continue if the given selector does NOT match any nodes.\n *\n * If a node is found, a {@link Command.error} message well be sent.\n *\n * @function fail\n * @memberof Command\n * @param {Selector} selector - A selector to match.\n * @instance\n * @see {@link Command.login}\n * @see {@link Command.filter}\n */\n\nfunction Fail(context, data, next, done) {\n    if (context.find(this.selector).length > 0) {\n        this.error('found ' + this.selector);\n    } else {\n        next(context, data);\n    }\n\n    done();\n}\n\nmodule.exports.fail = function (selector) {\n    this.selector = selector;\n    return Fail;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/filter.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Check that the context node matches the given selector.\n *\n * @function filter\n * @memberof Command\n * @param {Selector} match - A Selector to match\n * @instance\n */\n\n\nfunction Filter(context, data, next, done) {\n    if (context.find(this.selector).length > 0) {\n        next(context, data);\n    }\n\n    done();\n}\n\nmodule.exports.filter = function (selector) {\n    this.selector = selector;\n    return Filter;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/find.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Search for nodes in the current Document.\n *\n * @function find\n * @param {Selector|contextCallback|Command.learn} selector\n * @memberof Command\n * @see {@link Command.select}\n * @instance\n */\n\n/**\n * Search for nodes in the current context.\n *\n * @function select\n * @param {Selector|contextCallback|Command.learn} selector - A selector\n * @memberof Command\n * @see {@link Command.find}\n * @instance\n */\n\nvar Find = function (context, data, next, done) {\n    var length, nodes, node, selector, i;\n\n    if (this.selector !== undefined) {\n        selector = this.selector;\n    } else {\n        selector = this.contextCallback(context, data);\n    }\n\n    if (this.relative === true) {\n        nodes = context.find(selector);\n    } else {\n        nodes = context.doc().find(selector);\n    }\n\n    length = nodes.length;\n\n    if (length === 0) {\n        done('no results for \"' + selector + '\"');\n        return;\n    }\n\n    if (this.getOpts().log === true) {\n        this.log('found ' + length + ' results for \"' + selector + '\"');\n    }\n\n    for (i = 0; i < length; i++) {\n        node = nodes[i];\n        node.last = (length - 1 === i);\n        node.index = i;\n        next(node, data);\n    }\n\n    done();\n};\n\nmodule.exports.find =\nmodule.exports.select = function (selector) {\n    var self = this;\n\n    if (typeof selector === 'function') {\n        this.contextCallback = selector;\n    } else if (selector instanceof Array) {\n        this.selector = selector.join(', ');\n    } else {\n        this.selector = selector;\n    }\n\n\n    // Search relative to the context node\n    if (this.name === 'select') {\n        this.relative = true;\n    } else {\n        // Wait to see if we're a nested instance\n        process.nextTick(function () {\n            if (self.instance.parent !== undefined) {\n                self.relative = true;\n            }\n        });\n    }\n\n    return Find;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/follow.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Follow a url.\n *\n * @function follow\n * @memberof Command\n * @param {Selector} selector - A selector string for link nodes\n * @instance\n */\n\nmodule.exports.follow = function (context, data, next, done) {\n    var selector = this.args[0],\n        self     = this,\n        nodes    = context.find(selector),\n        document = context.doc(),\n        i = 0, queue = 0, length, node, url,\n        requestDone = function (err, document) {\n            if (err === null) {\n                next(document, data);\n            }\n\n            if (--queue === 0) {\n                done();\n            }\n        };\n\n    if (nodes === undefined || nodes.length === 0) {\n        done('no results for \"' + selector +\n             '\" in ' + document.location.href);\n        return;\n    }\n\n\n    for (length = nodes.length, i = 0; i < length; i++) {\n        node = nodes[i];\n\n        if (node.value !== undefined) {\n            url = node.value();\n        } else if (url = node.attr('href')) {\n            // Don't use Attribute.text() or Attribute.value()\n            // in order to keep URL encoding\n            url = url.toString();\n            url = url.substring(url.indexOf('\"') + 1, url.lastIndexOf('\"'));\n        } else {\n            url = node.text();\n        }\n\n        if (url !== null && url.length > 0) {\n            queue++;\n\n            self.log(\"url: \" + url);\n            self.request('get',\n                        context,\n                        url,\n                        null,\n                        requestDone);\n        }\n    }\n\n    if (queue === 0) {\n        done();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/get.js":"/*jslint node: true */\n'use strict';\n\nvar externalURLRegex = /^((http:|https:)?\\/\\/|[^\\/\\.])/;\n\n/**\n * Make an HTTP GET request.\n *\n * @function get\n * @param {(string|contextCallback)} url - An absolute or relative URL or a\n * contextCallback that calls a URL.\n * @param {object} [params] - HTTP GET query parameters\n * @memberof Command\n * @instance\n * @see {@link Command.post}\n */\n\n/**\n * Make an HTTP POST request.\n * @function post\n * @param {(string|contextCallback)} url - An absolute or relative URL or a\n * contextCallback that calls a URL.\n * @param {object} [data] - HTTP POST data\n * @memberof Command\n * @instance\n * @see {@link Command.get}\n */\n\nfunction Get(context, data, next, done) {\n    this.request(this.name,\n                context,\n                this.getURL(this.url, context, data),\n                this.params,\n                function (err, context) {\n                    if (err === null) {\n                        next(context, data);\n                    }\n\n                    done();\n                });\n}\n\nfunction getURLArg(url) {\n    return url;\n}\n\nfunction getURLFunction(func, context, data) {\n    var res = func(context, data.getObject());\n\n    if (res.nodeType !== undefined) {\n        res = getURLContext(res);\n    }\n\n    return res;\n}\n\nfunction getURLContext(context) {\n    if (context.getAttribute('href')) {\n        return context.getAttribute('href');\n    }\n\n    if (context.text !== undefined) {\n        return context.text();\n    } else if (context.value !== undefined) {\n        return context.value();\n    }\n}\n\nmodule.exports.get =\nmodule.exports.post = function (url, query) {\n    var args  = this.args,\n        urlIsFunction   = typeof url === 'function',\n        queryIsFunction = typeof query === 'function';\n\n    if (typeof args[3] === 'object' || typeof args[4] === 'object') {\n        console.error(\"GET/POST: `opts` argument deprecated.\" +\n                      \"Use `.config` instead.\");\n    }\n\n    if (typeof args[3] === 'function' || typeof args[4] === 'function') {\n        console.error(\"GET/POST: `callback` argument deprecated.\" +\n                      \"Use `.then` instead.\");\n    }\n\n    if (urlIsFunction === true) {\n        this.getURL = getURLFunction;\n    } else {\n        this.getURL = getURLArg;\n    }\n\n    this.url    = url;\n    this.params = query;\n\n    return Get;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/header.js":"/**\n * Set an HTTP header. Short for `.config({ headers: ... })`\n *\n * @function header\n * @param {string} name - Header name\n * @param {string} value - Header value\n * @memberof Command\n * @instance\n * @see Osmosis.headers\n * @see Osmosis.config\n */\n\nmodule.exports = function (name, value) {\n    var opts = this.getOpts(), headers;\n\n    if (opts.hasOwnProperty('headers')) {\n        opts.headers[name] = value;\n    } else {\n        headers = {};\n        headers[name] = value;\n        this.setOpt('headers', headers);\n    }\n\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/headers.js":"/**\n * Set multiple HTTP headers. Short for `.config({ headers: ... })`.\n *\n * @function headers\n * @param {object} headers - { headerName: headerValue, ... }\n * @memberof Command\n * @instance\n * @see Osmosis.header\n * @see Osmosis.config\n */\n\nmodule.exports = function (headers) {\n    var opts = this.getOpts(), key;\n\n    if (opts.hasOwnProperty('headers')) {\n        for (key in headers) {\n            opts.headers[key] = headers[key];\n        }\n    } else {\n        this.setOpt('headers', headers);\n    }\n\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/if.js":"/**\n * Execute the immediately following command if each argument is true.\n *\n * An argument is considered to be `true` IF:\n *      - a {@link Selector} argument finds at least one node\n *      - a nested {@link Osmosis} instance:\n *          - Successfully {@link Command.set}s some data OR\n *          - There is at least one {@link context}\n *      - a {@link contextCallback} doesn't return false, null, or undefined\n *\n * @function if\n * @private\n * @param {Selector|Osmosis|contextCallback} [conditions]\n * @memberof Command\n * @instance\n * @see {@link Command.else}\n */\n\nvar If = function () {\n\n};\n\nIf.compile = function (command) {\n    var args   = command.args;\n\n    length = args.length;\n};\n\nmodule.exports.if = If;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/learn.js":"/**\n * Osmosis learns to find dynamic content via static selectors.\n *\n * @function learn\n * @memberof Command\n * @param {string} name - The name of the runtime variable\n * @instance\n * @see {@link Command.use}\n */\n\nvar Learn = function (context) {\n    var name     = this.args[0],\n        selector = this.lookup(selector),\n        tData    = this.trainingData,\n        nodes, i;\n\n    if (selector === undefined) {\n        // No definition, use the learned selector.\n        return;\n    } else {\n        nodes = context.find(selector);\n\n        for (i = 0; i < nodes.length; i++) {\n            this.nodeSet.push(nodes[i]);\n        }\n\n        this.selector = getSelector(this.nodeSet);\n    }\n};\n\nfunction getSelector(nodes, isParent) {\n\n    var node     = nodes[0],\n        classes  = node.classList,\n        selector = '',\n        i, parentSelector, className, matches,\n        position;\n\n    if (nodes.length === 0) {\n        return '';\n    }\n\n    if (match(nodes, nodeId)) {\n        return '#' + node.id;\n    }\n\n    if (match(nodes, nodeName)) {\n        selector += nodeName;\n    }\n\n    // Find common class names\n    for (i = 0; i < classes.length; i++) {\n        className = classes[i];\n        matches   = [];\n\n        if (match(nodes, nodeHasClass, className)) {\n            matches.push(className);\n        }\n\n        selector = '.' + matches.join('.');\n    }\n\n    parentSelector = getSelector(parents(nodes), true);\n\n    if (node.parentNode && isParent !== true) {\n        position = node.parentNode.childNodes.indexOf(node);\n\n        if (match(nodes, nodePosition)) {\n            selector += ':nth-of-type(' + position + ')';\n        }\n    }\n\n    if (parentSelector.length > 0) {\n        return parentSelector + ' > ' + selector;\n    }\n\n    return selector;\n}\n\nfunction match(nodes, cb, arg) {\n\n    var value = cb(nodes[0], arg), i;\n\n    for (i = 1; i < nodes.length; i++) {\n        if (cb(nodes[i], arg) !== value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction parents(nodes) {\n    var arr    = [],\n        i      = 0,\n        length = nodes.length,\n        parent;\n\n\n    for (i = 0; i < nodes.length; i++) {\n        parent = nodes[i].parentNode;\n\n        if (parent) {\n            arr.push(parent);\n        }\n    }\n\n    return arr;\n}\n\nfunction nodeName(node) {\n    return node.nodeName;\n}\n\nfunction nodeId(node) {\n    return node.id;\n}\n\nfunction nodeHasClass(node, className) {\n    return node.classList.indexOf(className) !== -1;\n}\n\nfunction nodePosition(node) {\n    return node.parentNode.childNodes.indexOf(node);\n}\n\nmodule.exports.learn = function () {\n    this.nodeSet = [];\n    return Learn;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/login.js":"'use strict';\n\n/**\n * Log in using a web page's login form.\n *\n * @function login\n * @memberof Command\n * @param {string} username - Username or email address\n * @param {string} password - Password\n * @instance\n * @see {@link Command.success}\n * @see {@link Command.fail}\n */\n\nvar form = require('../Form.js');\n\nfunction Login(context, data, next, done) {\n    var user = this.args[0],\n        pass = this.args[1],\n        params = {},\n        loginForm = context.get('form:has(input[type=\"password\"])'),\n        self = this,\n        userInput, passInput,\n        nodes, i, method, url;\n\n    if (loginForm === null) {\n        this.error('No login form found');\n        return;\n    }\n\n    userInput = loginForm.get('input[(not(@type) or @type=\"text\") and @name]' +\n                         ':before(input[type=\"password\"]):last');\n\n    if (!userInput) {\n        done('No user field found');\n        return;\n    }\n\n    passInput = userInput.get('following::input[type=\"password\"]');\n\n    if (!passInput) {\n        done('No password field found');\n        return;\n    }\n\n    params = form.getParams(loginForm);\n    params[userInput.getAttribute('name')] = user;\n    params[passInput.getAttribute('name')] = pass;\n\n    url = form.getAction(loginForm);\n    method = form.getMethod(loginForm);\n\n    this.debug(method + ' ' + url + ' ' + JSON.stringify(params));\n\n    this.request(method,\n                 loginForm,\n                 url,\n                 params,\n                 function (err, document) {\n                     if (err === null) {\n                         next(document, data);\n                     }\n\n                     done();\n                 });\n}\n\nmodule.exports.login = function (username, password) {\n    this.username = username;\n    this.password = password;\n    return Login;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/match.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Continue if the context node innerText matches a RegExp.\n *\n * @function match\n * @memberof Command\n * @param {string|RegExp} match - A RegExp to match.\n * @instance\n */\n\nfunction Match(context, data, next, done) {\n    if (this.regex.test(getContent(context))) {\n        next(context, data);\n    } else {\n        this.debug('\"' + this.regex.toString() + '\" not found');\n    }\n\n    done();\n}\n\nfunction getContent(node) {\n    if (node.text !== undefined) {\n        return node.text();\n    } else if (node.value !== undefined) {\n        return node.value();\n    }\n}\n\nmodule.exports.match = function (regex) {\n    this.regex = regex;\n    return Match;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/paginate.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Loads multiple pages.\n *\n * The first argument can alternatively be an object representing\n * HTTP GET/POST parameters to modify.\n *\n * If the first argument is an object, numeric values will\n * increment the existing parameter value by that amount.\n *\n * String values are treated as selectors and each corresponding\n * parameter's value will be replaced with the content of the selected node.\n *\n * @function paginate\n * @memberof Command\n * @param {selector} selector - A link or form to the next page.\n * @param {number|Selector|middlewareCallback} [limit] -\n    Total number of pages to load.\n * @instance\n */\n\nvar form = require('../Form.js');\n\nfunction Paginate(context, data, next, done) {\n    var selector = this.selector,\n        limit = this.getLimit(this.limit, context, data),\n        document = context.doc(),\n        count = document.request.count || 1,\n        self = this,\n        params = {},\n        method, url, param, node = context, name, value;\n\n    next(context, data);\n\n    if (limit !== undefined && count > limit) {\n        return done();\n    }\n\n    method = document.location.method || 'get';\n    url    = document.location.href;\n    params = {};\n\n    if (selector instanceof Object) {\n        for (param in selector) {\n            value = selector[param];\n\n            if (typeof value !== 'number') {\n                params[param] = getContent(context.get(value));\n            } else {\n                params[param] = (parseFloat(document.request.params[param]) ||\n                                 0) +\n                                value;\n            }\n        }\n    } else {\n        node = document.get(selector);\n\n        if (!node) {\n            return done('no results for \"' + selector + '\" in ' + url);\n        } else if (node.nodeName === 'form') {\n            url = form.getAction(node);\n            method = form.getMethod(node);\n            params = form.getParams(node);\n        } else if (node.hasAttribute('href')) {\n            url = node.getAttribute('href');\n        } else {\n            name = node.getAttribute('name');\n\n            if (name !== null) {\n                name = name.value();\n                value = node.getAttribute('value');\n\n                if (value === null) {\n                    value = getContent(node);\n                }\n\n                params[name] = value;\n            } else {\n                return done('no URL found in ' + selector);\n            }\n        }\n    }\n\n    this.log('loading page ' + count + (limit ?\n                                        '/' + limit :\n                                        '') + ' - ' + url);\n\n    this.request(method, node, url, params, function (document) {\n                document.request.count = count + 1;\n                self.start(document, data);\n            });\n\n    done();\n}\n\nfunction getLimitArg(limit) {\n    return limit;\n}\n\nfunction getLimitFunction(callback, context, data) {\n    var value = callback(context, data.getObject());\n\n    if (value === false) {\n        return 0;\n    } else if (value === true) {\n        return undefined;\n    } else {\n        return value;\n    }\n}\n\nfunction getLimitSelector(selector, context) {\n    var node = context.get(selector), value;\n\n    if (!node) {\n        return 0;\n    }\n\n    value = getContent(node);\n\n    if (!value) {\n        return 0;\n    }\n\n    value = parseInt(value.replace(/[^0-9\\.]+/g, ''));\n\n    return value || 0;\n}\n\nfunction getContent(node) {\n    if (node.text !== undefined) {\n        return node.text();\n    } else if (node.value !== undefined) {\n        return node.value();\n    }\n}\n\nmodule.exports.paginate = function (selector, limit) {\n    this.selector = selector;\n    this.limit = limit;\n\n    switch (typeof limit) {\n        case 'string':\n            this.getLimit = getLimitSelector;\n            break;\n        case 'function':\n            this.getLimit = getLimitFunction;\n            break;\n        default:\n            this.getLimit = getLimitArg;\n            break;\n    }\n\n    return Paginate;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/parse.js":"/**\n * Parse HTML or XML data\n\n * @function parse\n * @param {string|buffer} data - XML/HTML data\n * @param {object} options - Parse options\n * @memberof Command\n * @instance\n * @see Osmosis.parse\n */\n\nmodule.exports.parse = function (context, data, next, done) {\n    var args = this.args;\n\n    next(this.instance.parse(args[0], args[1]), data);\n    done();\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/pause.js":"/**\n * Pause an Osmosis instance.\n *\n * @function pause\n * @memberof Command\n * @instance\n */\n\nmodule.exports = function () {\n    this.instance.queue.push();\n    this.prev.debug('pausing');\n    this.instance.paused = true;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/proxy.js":"/**\n * Set a proxy. Short for `.config({ proxy: ... })`\n *\n * @function proxy\n * @memberof Command\n * @param {string|array} proxy - A string or array of HTTP proxy URL(s)\n * @instance\n * @see Osmosis.config\n */\n\nmodule.exports = function (value) {\n    this.getOpts().proxy = value;\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/resume.js":"/**\n * Resume an Osmosis instance.\n *\n * @function resume\n * @memberof Command\n * @instance\n */\n\nmodule.exports = function () {\n    this.instance.queue.pop();\n    var instance = this.instance;\n\n    this.prev.debug('resuming');\n    this.instance.paused = false;\n    this.instance.resume();\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/rewrite.js":"module.exports.rewrite = function (context, data, next, done) {\n    console.error('DEPRECATED. Use .find(selector).get(callback) instead.');\n    next(context, data);\n    done();\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/set.js":"/*jslint node: true */\n'use strict';\n\nvar sourceSelectorRegexp    = /:source$/,\n    innerHTMLSelectorRegexp = /:html$/;\n\n/**\n * Set values in the {@link data} object.\n *\n * Note: Also accepts set(key, selector) as parameters\n *\n * @function set\n * @memberof Command\n * @param {object} data - Key/selector pairs to set.\n * @instance\n */\n\nmodule.exports.set = function (key, val) {\n    var args = key,\n        isArray = args instanceof Array;\n\n    if (val !== undefined) {\n        args = {};\n        args[key] = val;\n    } else if (typeof key === 'string') {\n        args = {};\n        args[key] = null;\n    }\n\n    return setObject(loopObject(args, isArray), isArray);\n};\n\nfunction loopObject(obj) {\n    var keys    = Object.keys(obj),\n        length  = keys.length,\n        isArray = obj instanceof Array,\n        arr     = new Array(length * 3),\n        i       = 0,\n        ai      = 0,\n        key, val, valIsArray, func, isObject;\n\n    for (; i < length; i++) {\n        key          = keys[i];\n        val          = obj[key];\n        valIsArray   = val instanceof Array;\n        isObject     = false;\n\n        if (typeof val === 'object' && val !== null) {\n            isObject = true;\n\n            if (val.isCommand === true) {\n                func = setInstance(val, key);\n            } else if (!valIsArray || val.length > 0) {\n                func = setObject(loopObject(val), valIsArray, key);\n            }\n        } else {\n            if (val === null) {\n                func = setContextNull;\n            } else if (typeof val === 'function') {\n                func = setContextFunc(val);\n            } else if (isArray) {\n                func = setContextArray(val);\n            } else if (sourceSelectorRegexp.test(val)) {\n                func = setContextSource(val);\n            } else if (innerHTMLSelectorRegexp.test(val)) {\n                func = setContextInnerHTML(val);\n            } else {\n                func = setContextVal(val);\n            }\n        }\n\n        arr[ai++] = key;\n        arr[ai++] = func;\n        arr[ai++] = isObject;\n    }\n\n    return arr;\n}\n\nfunction setObject(arr, isArray, index) {\n    var length   = arr.length,\n        total    = length / 3,\n        isNested = index !== undefined;\n\n    return function (context, data, next, done) {\n        var count = total,\n            dataDone  = function () {\n                if (--count !== 0) {\n                    return false;\n                }\n\n\n                if (isNested && data.parent !== undefined) {\n                    data.parent.merge(data);\n                }\n\n                next(context, data);\n\n                // done will be undefined if setObject is called by setObject\n                if (done !== undefined) {\n                    done();\n                }\n\n                return true;\n            },\n\n            key, val, isObject, i;\n\n        if (context === undefined) {\n            done(\"No context\");\n            return;\n        }\n\n        if (done !== undefined) {\n            data = data.clone();\n        }\n\n        if (isNested === true) {\n            data = data.child()\n                        .setIndex(index)\n                        .isArray(isArray)\n                        .done(dataDone)\n                        .ref();\n        }\n\n        if (isArray === true) {\n            setArray(context, data, dataDone, arr, 0);\n            return;\n        }\n\n        for (i = 0; i < length; i++) {\n            key  = arr[i];\n            val  = arr[++i];\n            isObject = arr[++i];\n\n            if (isObject === true) {\n                val(context, data, dataDone);\n            } else {\n                data.set(key, val(context, data));\n                dataDone();\n            }\n        }\n    };\n}\n\n// Call in serial to preserve array order\nfunction setArray(context, data, done, arr, i) {\n    var key  = arr[i++],\n        val  = arr[i++],\n        isObject = arr[i++];\n\n    data.toArray();\n\n    if (isObject === true) {\n        val(context, data, function () {\n            if (done() === false) {\n                setArray(context, data, done, arr, i);\n            }\n        });\n    } else {\n        data.push(val(context, data));\n\n        if (done() === false) {\n            setArray(context, data, done, arr, i);\n        }\n    }\n}\n\nfunction setInstance(instance, index) {\n    return function (context, data, done) {\n        instance.start(context,\n                       data.child()\n                           .setIndex(index)\n                           .done(done)\n                           .ref());\n    };\n}\n\nfunction setContextNull(context) {\n    return getContent(context);\n}\n\nfunction setContextVal(selector) {\n    return function (context) {\n        return getContent(context.get(selector));\n    };\n}\n\nfunction setContextArray(selector) {\n    return function (context, data) {\n        var nodes  = context.find(selector),\n            length = nodes.length - 1,\n            i;\n\n        for (i = 0; i < length; i++) {\n            data.push(getContent(nodes[i]));\n        }\n\n        return getContent(nodes[length]);\n    };\n}\n\nfunction setContextFunc(cb) {\n    return function (context, data) {\n\n        var val     = cb(context, data),\n            content = getContent(val);\n\n        if (content !== undefined) {\n            return content;\n        }\n\n        return val;\n\n    };\n}\n\nfunction setContextSource(s) {\n    var selector = s.replace(sourceSelectorRegexp, '');\n\n    return function (context) {\n        var node = context.get(selector);\n\n        if (!node) {\n            return;\n        }\n\n        return node.toString();\n    };\n}\n\nfunction setContextInnerHTML(s) {\n    var selector = s.replace(innerHTMLSelectorRegexp, '');\n\n    return function (context) {\n        var node = context.get(selector);\n\n        if (!node) {\n            return;\n        }\n\n        return node.innerHTML;\n    };\n}\n\nfunction getContent(node) {\n    if (!node) {\n        return;\n    }\n\n    if (node.text !== undefined) {\n        return node.text().trim();\n    } else if (node.value !== undefined) {\n        return node.value().trim();\n    }\n\n    return;\n}\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/stop.js":"/**\n * Stop an Osmosis instance.\n *\n * @function stop\n * @memberof Command\n * @instance\n */\n\nmodule.exports = function () {\n    this.instance.queue.pop();\n    this.pause();\n    this.instance.stopped = true;\n    this.instance.paused = true;\n    this.debug('stopping');\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/submit.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Submit a form.\n *\n * @function submit\n * @memberof Command\n * @param {Selector} selector - A selector for a <form> or submit button.\n * @param {object} params - Keys/values for the form's inputs.\n * @instance\n */\n\nvar form = require('../Form.js');\n\nfunction Submit(context, data, next, done) {\n    var node = context.get(this.selector),\n        method, url, params, param;\n\n    if (node === null) {\n        return done('No results for ' + this.selector);\n    }\n\n    method = form.getMethod(node);\n    url    = form.getAction(node);\n    params = form.getParams(node);\n\n    for (param in this.params) {\n        params[param] = this.params[param];\n    }\n\n    this.request(method, node, url, params, function (err, document) {\n        if (err === null) {\n            next(document, data);\n        }\n\n        done();\n    });\n}\n\nmodule.exports.submit = function (selector, params) {\n    this.selector = selector;\n    this.params = params;\n    return Submit;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/success.js":"/*jslint node: true */\n'use strict';\n\n/**\n * Continue if the given selector matches any nodes.\n *\n * If no nodes are found, a {@link Command.error} message will be sent.\n *\n * @function success\n * @memberof Command\n * @param {Selector} selector - A selector to match.\n * @instance\n * @see {@link Command.login}\n * @see {@link Command.filter}\n */\n\nfunction Success(context, data, next, done) {\n    if (context.find(this.selector).length > 0) {\n        next(context, data);\n    } else {\n        this.error(this.selector + ' not found');\n    }\n\n    done();\n}\n\nmodule.exports.success = function (selector) {\n    this.selector = selector;\n    return Success;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/then.js":"/**\n * Execute a given {@link callback}.\n *\n * @function then\n * @memberof Command\n * @param {callback} callback\n * @instance\n */\n\n/**\n * The next function is used to send a {@link context} and\n * a {@link data} object to the immediately following Command.\n *\n * The {@link next} function must be called if you want to change\n * the context or data object.\n *\n * @callback next\n * @param {context} context - The context to send to the following command\n * @param {data}    data    - The data object to send to the following command\n * @see done\n * @see callback\n * @see {@link Command.then}\n */\n\n/**\n * The done function is used to tell Osmosis that a\n * callback has finished **asynchronous** execution.\n *\n * The {@link done} function is required if the\n * callback function calls {@link next} asynchronously.\n *\n * The {@link done} function MUST be called if it is included\n * as an argument to the callback function.\n *\n * Note: You must not call {@link next} after calling done.\n *\n * @callback done\n * @see next\n * @see callback\n * @see {@link Command.then}\n */\n\n/**\n * A callback function can be used to access and modify\n * the {@link context} and {@link data} object at the current\n * point in the command chain.\n *\n * @callback callback\n * @param {context} context - The current HTML/XML context\n * @param {data} data - The current data object\n * @param {next} [next] - Continue a context and data down the chain\n * @param {done} [done] - Called when finished calling {@link next}\n * @this Command\n * @see {@link Command.then}\n */\n\n\nvar regexp_function_arg = /^\\s*(function\\s*)?\\(?([^\\s\\,\\)]+)/;\n\nfunction Then(callback, getContext) {\n    var length = callback.length;\n\n    return function (context, data, next, done) {\n        var self = this, calledDone = false;\n\n        getContext(context, function (context) {\n            callback.call(self, context, data.getObject(), function (c, d) {\n                next(c, data.setObject(d));\n\n                if (length === 3 && calledDone === false) {\n                    process.nextTick(done);\n                    calledDone = true;\n                }\n            }, done);\n\n            if (length <= 2) {\n                next(context, data);\n                done();\n            }\n        });\n    };\n}\n\nfunction getContextArg(context, callback) {\n    callback(context);\n}\n\nfunction getDocumentArg(context, callback) {\n    callback(context.document || context.doc());\n}\n\nfunction getWindowArg(context, callback) {\n    context = context.window || context.doc().defaultView;\n    context.addEventListener('done', function () {\n        callback(context);\n    });\n}\n\nfunction getJQueryArg(context, callback) {\n    getWindowArg(context, function (context) {\n        if (context.jQuery !== undefined) {\n            callback(context.jQuery);\n        } else {\n            callback(context.$);\n        }\n    });\n}\n\nmodule.exports.then = function (callback) {\n    var getContext   = getContextArg, contextArg;\n\n    if (callback.length > 0) {\n        contextArg = callback.toString().match(regexp_function_arg)[2];\n    }\n\n    if (contextArg === '$') {\n        getContext = getJQueryArg;\n    } else if (contextArg === 'window') {\n        getContext = getWindowArg;\n    } else if (contextArg === 'document') {\n        getContext = getDocumentArg;\n    }\n\n    return Then(callback, getContext);\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/train.js":"/**\n * Teach Osmosis how to find content.\n *\n * @function train\n * @memberof Command\n * @param {object} object - { name: selector } pairs of training variables\n * @instance\n * @see {@link Command.learn}\n */\n\nvar Train = function () {\n};\n\nmodule.exports.train = function () {\n    return Train;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/trigger.js":"/**\n * Trigger a DOM event and continue once it completes.\n *\n * Note: If no selector is specified, the default event target will be\n * the Window object.\n *\n * @function trigger\n * @param {string} event - The name of the event to trigger.\n * @param {Selector} [selector] - Nodes to trigger the event on.\n * @memberof Command\n * @instance\n */\n\nfunction Trigger(context, data, next, done) {\n    var event = this.event, window = context.defaultView;\n\n    window.addEventListener('done', function () {\n        window.dispatchEvent(event);\n        next(context, data);\n        done();\n    });\n}\n\nmodule.exports.trigger = function (event, selector) {\n    this.event = event;\n    this.selector = selector;\n    return Trigger;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/use.js":"/**\n * Use a runtime defined variable\n *\n * @function use\n * @memberof Command\n * @instance\n * @see {@link Command.run}\n * @see {@link Command.learn}\n */\n\nvar Use = function () {\n    return this.lookup(this.args[0]);\n};\n\nmodule.exports.use = function () {\n\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/commands/using.js":"/**\n * Set variables to use.\n *\n * @function using\n * @memberof Command\n * @param {object} object - { key: value } pairs of variables\n * @instance\n * @see {@link Command.use}\n */\n\nvar Using = function () {\n};\n\nmodule.exports.using = function () {\n    return Using;\n};\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/Queue.js":"'use strict';\n\n/**\n * An Osmosis request queue.\n *\n * @constructor Queue\n * @protected\n * @param {object} instance - parent instance\n * @returns Command\n */\n\nfunction Queue(instance) {\n    this.instance = instance;\n    this.opts = instance.opts;\n    this.queue = [];\n}\n\nQueue.prototype = {\n    change:     0,\n    count:      0,\n    done:       0,\n    requests:   0,\n    length:     0,\n    enqueue: function (object) {\n        this.queue[this.length++] = object;\n    },\n    dequeue: function () {\n        var object = this.queue[--this.length];\n\n        this.queue[this.length] = null;\n\n        return object;\n    },\n    push: function () {\n        if (++this.change >= 25) {\n            if (this.instance.resources !== null) {\n                this.instance.resources();\n            }\n\n            this.change = 0;\n        }\n\n        return ++this.count;\n    },\n    pop: function () {\n        var self = this;\n\n        if (--self.count === 0) {\n            process.nextTick(function () {\n                var instance;\n\n                if (self.count === 0) {\n                    instance = self.instance;\n                    instance.command.done();\n\n                    if (instance.opts.debug === true) {\n                        instance.resources();\n                    }\n                }\n            });\n        }\n\n        this.change++;\n\n        return this.count;\n    }\n};\n\nmodule.exports = Queue;\n","/home/travis/build/npmtest/node-npmtest-osmosis/node_modules/osmosis/lib/Request.js":"'use strict';\n\nvar needle = require('needle'),\n    URL    = require('url'),\n    libxml = require('libxmljs-dom');\n\n/**\n * Make an HTTP request.\n *\n * @private\n */\n\nfunction Request(method, url, params, opts, tries, callback) {\n    var location = url;\n\n    return needle.request(method,\n                          url.href,\n                          params,\n                          opts,\n                          function (err, res, data) {\n        var document;\n\n        if (err !== null) {\n            callback(err.message);\n            return;\n        }\n\n        if (opts.ignore_http_errors !== true &&\n            res                     !== undefined &&\n            res.statusCode          >=  400   &&\n            res.statusCode          <=  500) {\n            // HTTP error\n            callback(res.statusCode + ' ' + res.statusMessage);\n            return;\n        }\n\n        if (method !== 'head' && (!data || data.length === 0)) {\n            callback('Data is empty');\n            return;\n        }\n\n        if (opts.process_response !== undefined) {\n            document = opts.process_response(data);\n        } else {\n            document = data;\n        }\n\n        if (opts.parse !== false) {\n            document = libxml.parseHtml(document,\n                                        { baseUrl: location.href, huge: true });\n        }\n\n        if (document === null) {\n            callback('Couldn\\'t parse response');\n            return;\n        }\n\n        if (document.errors[0] !== undefined &&\n            document.errors[0].code === 4) {\n            callback('Document is empty');\n            return;\n        }\n\n        if (document.root() === null) {\n            callback('Document has no root');\n            return;\n        }\n\n        location.headers    = res.req._headers;\n        location.proxy      = opts.proxy;\n        location.user_agent = opts.user_agent;\n\n        document.location = location;\n        document.request  = location;\n\n        setResponseMeta(document, res, data.length);\n        setCookies(document, res.cookies);\n        setCookies(document, opts.cookies);\n\n        if (opts.keep_data === true) {\n            document.response.data = data;\n        }\n\n        callback(null, res, document);\n    })\n    .on('redirect', function (href) {\n        extend(location, URL.parse(URL.resolve(location.href, href)));\n    });\n}\n\nfunction setResponseMeta(document, res, size) {\n    var response = {\n            type: getResponseType(res.headers['content-type']),\n            statusCode: res.statusCode,\n            statusMessage: res.statusMessage,\n            headers: res.headers,\n            size: {\n                body: size\n            }\n        };\n\n\n    if (res.socket !== undefined) {\n        response.size.total   = res.socket.bytesRead;\n        response.size.headers = res.socket.bytesRead - size;\n    }\n\n    document.response = response;\n}\n\nfunction getResponseType(contentType) {\n    if (contentType === undefined) {\n        return null;\n    }\n\n    if (contentType.indexOf('xml') !== -1) {\n        return 'xml';\n    }\n\n    if (contentType.indexOf('html') !== -1) {\n        return 'html';\n    }\n\n    return contentType;\n}\n\n\nfunction setCookies(document, cookies) {\n    var key, keys, length;\n\n    if (cookies === undefined) {\n        return;\n    }\n\n    keys = Object.keys(cookies);\n    length = keys.length;\n\n    if (length === 0) {\n        return;\n    }\n\n    if (document.cookies === undefined) {\n        document.cookies = {};\n    }\n\n    while (length--) {\n        key = keys[length];\n        document.cookies[key] = cookies[key];\n    }\n}\n\nfunction extend(object, donor) {\n    var key, keys = Object.keys(donor), i = keys.length;\n\n    while (i--) {\n        key = keys[i];\n        object[key] = donor[key];\n    }\n\n    return object;\n}\n\nmodule.exports = Request;\n"}